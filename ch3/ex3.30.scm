(define (half-adder a b s c)
  (let ((d (make-wire)) (e (make-wire)))
    (or-gate a b d)
    (and-gate a b c)
    (inverter c e)
    (and-gate d e s)
    'ok))

(define (full-adder a b c-in sum c-out)
  (let ((s (make-wire))
        (c1 (make-wire))
        (c2 (make-wire)))
    (half-adder b c-in s c1)
    (half-adder a s sum c2)
    (or-gate c1 c2 c-out)
    'ok))

(define (ripper-carry-adder A-list B-list S-list C)
  (define (iter A B S)
    (if (or (null? A) (null? B) (null? S))
        'ok
        (let ((C-k (make-wire)))
          (set-signal! C-k (get-signal C))
          (full-adder (car A) (car B) C-k (car S) C)
          (iter (cdr A) (cdr B) (cdr S)))))
  (iter A-list B-list S-list))